package {		import flash.display.*;	import flash.events.*;	import flash.text.*;		import flash.external.ExternalInterface;	import flash.net.FileReference;	import flash.net.FileReferenceList;	import flash.net.FileFilter;	import flash.net.URLRequest;	public class AjaxFileUpload extends MovieClip {				var file:FileReference;		var multiFile:FileReferenceList;		var allowedContentTypes:Array;		var fileSizeLimit:Number = 100000000;		var urlRequest:URLRequest;		var speed:Number = 0;		var currentBytes:Number = 0;		var totalBytes:Number = 0;		var settings:Object = LoaderInfo(stage.loaderInfo).parameters;		public function AjaxFileUpload():void {						if (!settings.url) {				settings.url = "http://fileupload.jchilders.com/demo/upload.php";			}						if (!settings.method) {				settings.method = "post";			}			if (settings.multiple) {				multiFile = new FileReferenceList();				bindEventsToObject(multiFile);			} else {				file = new FileReference();				bindEventsToObject(file);			}						urlRequest = new URLRequest();			urlRequest.url = settings.url;			urlRequest.method = settings.method;						setupButton();					}				private function setupButton():void {			select_btn.useHandCursor = true;			select_btn.alpha = 0;			select_btn.x = 0;			select_btn.y = 0;			select_btn.width = this.root.width;			select_btn.height = this.root.height;		}		private function bindEventsToObject(obj):void {			select_btn.addEventListener(MouseEvent.CLICK, triggerBrowseDialog);				obj.addEventListener(Event.CANCEL, onCancel);			obj.addEventListener(Event.COMPLETE, onComplete);			obj.addEventListener(IOErrorEvent.IO_ERROR, onError);			obj.addEventListener(Event.OPEN, onOpen);			obj.addEventListener(ProgressEvent.PROGRESS, onProgress);			obj.addEventListener(Event.SELECT, onSelection);			obj.addEventListener(DataEvent.UPLOAD_COMPLETE_DATA, onCompleteData);		}				private function triggerBrowseDialog(e:MouseEvent):void {    		//fileRef.browse(new Array( new FileFilter( "Images (*.jpg, *.jpeg, *.gif, *.png)", "*.jpg;*.jpeg;*.gif;*.png" )));			if (settings.multiple) {				multiFile.browse();			} else {				file.browse();			}		}				private function callJS(method:String, args:Array){			ExternalInterface.call("AjaxFileUploadFlashProxy", settings.id, method, args);		}				/**		 Callbacks		----------------------------------------*/		private function onCancel(e:Event):void {}				private function onComplete(e:Event):void {			callJS("onProgressEnd", [e.currentTarget]);		}				private function onError(e:IOErrorEvent):void {			callJS("onError", [e.text]);		}				private function onOpen(e:Event):void {			callJS("onProgressStart", [e.currentTarget]);		}				private function onProgress(e:ProgressEvent):void {			callJS("onProgress", [e.bytesLoaded, e.bytesTotal, Math.round(e.bytesLoaded / e.bytesTotal * 100) + "%"]);		}				private function onSelection(e:Event):void {			if (settings.multiple) {				for (var i:Number = 0; i<multiFile.fileList.length; i++) {					bindEventsToObject(multiFile.fileList[i]);					multiFile.fileList[i].upload(urlRequest);				}			} else {				file.upload(urlRequest);			}      callJS("onFileSelect", [e.currentTarget]);		}		private function onCompleteData(e:DataEvent):void {			trace(e.data);			callJS("onSuccess", [e.data]);		}			}	}